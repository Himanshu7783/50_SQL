620. Not Boring Movies

Table: Cinema

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| id             | int      |
| movie          | varchar  |
| description    | varchar  |
| rating         | float    |
+----------------+----------+
id is the primary key (column with unique values) for this table.
Each row contains information about the name of a movie, its genre, and its rating.
rating is a 2 decimal places float in the range [0, 10]
 

Write a solution to report the movies with an odd-numbered ID and a description that is not "boring".

Return the result table ordered by rating in descending order.

The result format is in the following example.

 

Example 1:

Input: 
Cinema table:
+----+------------+-------------+--------+
| id | movie      | description | rating |
+----+------------+-------------+--------+
| 1  | War        | great 3D    | 8.9    |
| 2  | Science    | fiction     | 8.5    |
| 3  | irish      | boring      | 6.2    |
| 4  | Ice song   | Fantacy     | 8.6    |
| 5  | House card | Interesting | 9.1    |
+----+------------+-------------+--------+
Output: 
+----+------------+-------------+--------+
| id | movie      | description | rating |
+----+------------+-------------+--------+
| 5  | House card | Interesting | 9.1    |
| 1  | War        | great 3D    | 8.9    |
+----+------------+-------------+--------+
Explanation: 
We have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer.


Solution

SELECT id, movie, description, rating
FROM Cinema
WHERE description <> 'boring' and mod(id,2) <> 0
ORDER BY rating desc
Explanation
The solution involves querying the Cinema table to retrieve movies that have odd-numbered IDs and a description that is not "boring". Here's a step-by-step explanation:

Filtering Conditions: The WHERE clause ensures that only rows with an odd-numbered id (using mod(id, 2) <> 0) and a description that is not "boring" (description <> 'boring') are selected.
Selecting Columns: The SELECT statement retrieves the columns id, movie, description, and rating.
Ordering: The ORDER BY clause sorts the results by rating in descending order, ensuring that movies with higher ratings appear first.
This query will produce the desired result table by combining these conditions and sorting criteria.
