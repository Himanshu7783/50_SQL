1934. Confirmation Rate
Solved
Medium
Topics
Companies
SQL Schema
Pandas Schema
Table: Signups

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
+----------------+----------+
user_id is the column of unique values for this table.
Each row contains information about the signup time for the user with ID user_id.
 

Table: Confirmations

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
| action         | ENUM     |
+----------------+----------+
(user_id, time_stamp) is the primary key (combination of columns with unique values) for this table.
user_id is a foreign key (reference column) to the Signups table.
action is an ENUM (category) of the type ('confirmed', 'timeout')
Each row of this table indicates that the user with ID user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') 
or expired without confirming ('timeout').
 

The confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages.
The confirmation rate of a user that did not request any confirmation messages is 0. Round the confirmation rate to two decimal places.

Write a solution to find the confirmation rate of each user.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Signups table:
+---------+---------------------+
| user_id | time_stamp          |
+---------+---------------------+
| 3       | 2020-03-21 10:16:13 |
| 7       | 2020-01-04 13:57:59 |
| 2       | 2020-07-29 23:09:44 |
| 6       | 2020-12-09 10:39:37 |
+---------+---------------------+
Confirmations table:
+---------+---------------------+-----------+
| user_id | time_stamp          | action    |
+---------+---------------------+-----------+
| 3       | 2021-01-06 03:30:46 | timeout   |
| 3       | 2021-07-14 14:00:00 | timeout   |
| 7       | 2021-06-12 11:57:29 | confirmed |
| 7       | 2021-06-13 12:58:28 | confirmed |
| 7       | 2021-06-14 13:59:27 | confirmed |
| 2       | 2021-01-22 00:00:00 | confirmed |
| 2       | 2021-02-28 23:59:59 | timeout   |
+---------+---------------------+-----------+
Output: 
+---------+-------------------+
| user_id | confirmation_rate |
+---------+-------------------+
| 6       | 0.00              |
| 3       | 0.00              |
| 7       | 1.00              |
| 2       | 0.50              |
+---------+-------------------+
Explanation: 
User 6 did not request any confirmation messages. The confirmation rate is 0.
User 3 made 2 requests and both timed out. The confirmation rate is 0.
User 7 made 3 requests and all were confirmed. The confirmation rate is 1.
User 2 made 2 requests where one was confirmed and the other timed out. The confirmation rate is 1 / 2 = 0.5.


Step-by-Step Solution
1. Understanding the Tables
Table: Signups

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
+----------------+----------+
user_id is the column of unique values for this table.
Each row contains information about the signup time for the user with ID user_id.
Table: Confirmations

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
| action         | ENUM     |
+----------------+----------+
2. Identify Key Points
We need to count the total number of confirmation requests per user (confirmed + timeout).
We also need to count how many of these were actually confirmed (action = 'confirmed').
If a user has no confirmation request, their rate should be 0.00.
3. Join the Tables
Since we need to show the confirmation rate for all users, even those who haven’t made any confirmation requests,
we will use a LEFT JOIN to ensure users from the Signups table appear even if they don’t exist in the Confirmations table.

4. Calculate the Confirmation Rate
We can count the total number of confirmation requests for each user and then calculate the number of confirmations,
dividing them to get the rate. If no confirmation requests were made, the rate is 0.

5. Write the SQL Query
SELECT s.user_id,
       COALESCE(ROUND(COUNT(CASE WHEN c.action = 'confirmed' THEN 1 END) / 
             NULLIF(COUNT(c.user_id), 0), 2), 0) AS confirmation_rate
FROM Signups s
LEFT JOIN Confirmations c
ON s.user_id = c.user_id
GROUP BY s.user_id;
6. Explanation of the Query
LEFT JOIN Confirmations c ON s.user_id = c.user_id: We join the Signups table with the Confirmations table to find users who made confirmation requests.
COUNT(CASE WHEN c.action = 'confirmed' THEN 1 END): This counts how many of the user’s confirmation requests were confirmed.
COUNT(c.user_id): This counts the total number of confirmation requests (both confirmed and timeout).
COALESCE(): This replaces IFNULL(). It returns the first non-null value, so if the result of the division is NULL (i.e., no confirmation requests), it will return 0 instead.
NULLIF(): This prevents division by zero by returning NULL if the count of confirmation requests is zero.
ROUND(..., 2): Rounds the result to two decimal places.
GROUP BY s.user_id: Groups the results by each user to compute the confirmation rate for each user.
Key Concepts Learned
LEFT JOIN: Ensures that all users from the Signups table are included in the result, even if they haven’t made any confirmation requests.
Conditional COUNT with CASE: Helps count only the confirmed actions.
GROUP BY: Groups the data by user to calculate the rate for each user.
Rounding: The ROUND function is used to round the result to two decimal places.
Conclusion
This problem helps you practice SQL joins, conditional counting, and aggregation functions.
It’s a useful problem for learning how to deal with missing data (users who didn’t make requests) and how to compute ratios.

Follow Me for More SQL & Data Science Content
If you found this article helpful and want to dive deeper into SQL, data science, and more, make sure to check out my other content.
You can find video solutions, tips, and tutorials across various platforms:

YouTube: Subscribe for detailed video solutions and tutorials.
Instagram: Follow for daily insights and SQL tips.
Twitter: Stay updated with quick SQL bytes.
GitHub: Check out my code repositories and projects.
Threads: Join discussions on Threads.
Tags:
SQL, SQL for Beginners, SQL Tutorial, SQL Query, LeetCode, LeetCode SQL, PostgreSQL, SQL Interview Questions, Tech Interview,
Database, Learn SQL, SQL Practice, SQL Queries, Coding Interview

Hashtags:
#SQL #SQLforBeginners #LeetCode #SQLTutorial #Database #LearnSQL #CodingInterview #DataScience
