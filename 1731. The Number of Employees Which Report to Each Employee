1731. The Number of Employees Which Report to Each Employee

Table: Employees

+-------------+----------+
| Column Name | Type     |
+-------------+----------+
| employee_id | int      |
| name        | varchar  |
| reports_to  | int      |
| age         | int      |
+-------------+----------+
employee_id is the column with unique values for this table.
This table contains information about the employees and the id of the manager they report to. Some employees do not report to anyone (reports_to is null). 
 

For this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.

Write a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.

Return the result table ordered by employee_id.

The result format is in the following example.

 

Example 1:

Input: 
Employees table:
+-------------+---------+------------+-----+
| employee_id | name    | reports_to | age |
+-------------+---------+------------+-----+
| 9           | Hercy   | null       | 43  |
| 6           | Alice   | 9          | 41  |
| 4           | Bob     | 9          | 36  |
| 2           | Winston | null       | 37  |
+-------------+---------+------------+-----+
Output: 
+-------------+-------+---------------+-------------+
| employee_id | name  | reports_count | average_age |
+-------------+-------+---------------+-------------+
| 9           | Hercy | 2             | 39          |
+-------------+-------+---------------+-------------+
Explanation: Hercy has 2 people report directly to him, Alice and Bob. Their average age is (41+36)/2 = 38.5, which is 39 after rounding it to the nearest integer.
Example 2:

Input: 
Employees table:
+-------------+---------+------------+-----+ 
| employee_id | name    | reports_to | age |
|-------------|---------|------------|-----|
| 1           | Michael | null       | 45  |
| 2           | Alice   | 1          | 38  |
| 3           | Bob     | 1          | 42  |
| 4           | Charlie | 2          | 34  |
| 5           | David   | 2          | 40  |
| 6           | Eve     | 3          | 37  |
| 7           | Frank   | null       | 50  |
| 8           | Grace   | null       | 48  |
+-------------+---------+------------+-----+ 
Output: 
+-------------+---------+---------------+-------------+
| employee_id | name    | reports_count | average_age |
| ----------- | ------- | ------------- | ----------- |
| 1           | Michael | 2             | 40          |
| 2           | Alice   | 2             | 37          |
| 3           | Bob     | 1             | 37          |
+-------------+---------+---------------+-------------+



Solution:

SELECT
    employee_id,
    department_id 
FROM 
    employee 
WHERE 
    primary_flag = "Y" 
GROUP BY 
    employee_id

UNION

SELECT 
    employee_id,
    department_id
FROM 
    (SELECT employee_id, department_id, COUNT(employee_id) 
    FROM employee 
    GROUP BY employee_id 
    HAVING COUNT(employee_id) = 1) AS t1;
Explanation:

SELECT: This function selects the columns that you want to include in the result table.
FROM: This function specifies the tables from which you want to select data.
WHERE: This function filters the data based on a condition. Here, WHERE clause to filter the data to only include employees with a primary department (primary_flag = "Y").
GROUP BY: This function groups the data by the specified columns. In this query,
GROUP BY clause to group the data by the employee_id column. This will ensure that each employee is only included once in the result table.
HAVING: This function filters the grouped data based on a condition. In this query, HAVING clause to filter the grouped data to only include employees who belong to one department (COUNT(employee_id) = 1).
UNION: This function combines the results of two queries into a single result table. Here UNION operator to combine the results of the two subqueries.
The first subquery selects all the employees with their primary department (primary_flag = "Y"). The second subquery selects all the employees who belong to one department (COUNT(employee_id) = 1). 
The UNION operator then combines the results of the two subqueries into a single result table
