626. Exchange Seats

Table: Seat

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| student     | varchar |
+-------------+---------+
id is the primary key (unique value) column for this table.
Each row of this table indicates the name and the ID of a student.
The ID sequence always starts from 1 and increments continuously.
 

Write a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.

Return the result table ordered by id in ascending order.

The result format is in the following example.

 

Example 1:

Input: 
Seat table:
+----+---------+
| id | student |
+----+---------+
| 1  | Abbot   |
| 2  | Doris   |
| 3  | Emerson |
| 4  | Green   |
| 5  | Jeames  |
+----+---------+
Output: 
+----+---------+
| id | student |
+----+---------+
| 1  | Doris   |
| 2  | Abbot   |
| 3  | Green   |
| 4  | Emerson |
| 5  | Jeames  |
+----+---------+
Explanation: 
Note that if the number of students is odd, there is no need to change the last one's seat.

Step-by-Step Solution:
Pairing Consecutive Students:
We need to pair consecutive rows and swap the student names between them.
Handling Odd Number of Students:
If the total number of students is odd, we leave the last student unchanged, as no swapping is required for them.
Swapping Logic:
For even ids, we can assign the previous student's id.
For odd ids, we can assign the next student's id.
Order the Result:
Finally, return the result ordered by id in ascending order.
Writing the SQL Query:
We can use conditional CASE statements to swap the students' names based on whether the id is odd or even.

SELECT 
    id,
    CASE 
        WHEN id % 2 = 1 AND id + 1 <= (SELECT MAX(id) FROM Seat) THEN (SELECT student FROM Seat WHERE id = s.id + 1)
        WHEN id % 2 = 0 THEN (SELECT student FROM Seat WHERE id = s.id - 1)
        ELSE student
    END AS student
FROM Seat s
ORDER BY id;
Explanation:
Condition for Odd id: For odd ids (like 1, 3, 5), the CASE statement swaps the student with the next id by using a subquery (SELECT student FROM Seat WHERE id = s.id + 1).
We also check if id + 1 is within the valid range to avoid out-of-bounds errors.
Condition for Even id: For even ids (like 2, 4), the student is swapped with the previous id by using (SELECT student FROM Seat WHERE id = s.id - 1).
No Swap for the Last Student: If the id is odd and the next id doesnâ€™t exist (like in the case of an odd number of rows), we keep the student's name unchanged.
Ordering: The results are ordered by id as required.
