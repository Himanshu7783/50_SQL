1633. Percentage of Users Attended a Contest

Table: Users

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| user_id     | int     |
| user_name   | varchar |
+-------------+---------+
user_id is the primary key (column with unique values) for this table.
Each row of this table contains the name and the id of a user.
 

Table: Register

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| contest_id  | int     |
| user_id     | int     |
+-------------+---------+
(contest_id, user_id) is the primary key (combination of columns with unique values) for this table.
Each row of this table contains the id of a user and the contest they registered into.
 

Write a solution to find the percentage of the users registered in each contest rounded to two decimals.

Return the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order.

The result format is in the following example.

 

Example 1:

Input: 
Users table:
+---------+-----------+
| user_id | user_name |
+---------+-----------+
| 6       | Alice     |
| 2       | Bob       |
| 7       | Alex      |
+---------+-----------+
Register table:
+------------+---------+
| contest_id | user_id |
+------------+---------+
| 215        | 6       |
| 209        | 2       |
| 208        | 2       |
| 210        | 6       |
| 208        | 6       |
| 209        | 7       |
| 209        | 6       |
| 215        | 7       |
| 208        | 7       |
| 210        | 2       |
| 207        | 2       |
| 210        | 7       |
+------------+---------+
Output: 
+------------+------------+
| contest_id | percentage |
+------------+------------+
| 208        | 100.0      |
| 209        | 100.0      |
| 210        | 100.0      |
| 215        | 66.67      |
| 207        | 33.33      |
+------------+------------+
Explanation: 
All the users registered in contests 208, 209, and 210. The percentage is 100% and we sort them in the answer table by contest_id in ascending order.
Alice and Alex registered in contest 215 and the percentage is ((2/3) * 100) = 66.67%
Bob registered in contest 207 and the percentage is ((1/3) * 100) = 33.33%

Write a solution to find the percentage of the users registered in each contest rounded to two decimals.

Return the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order.

Code:

# Write your MySQL query statement below

select

contest_id,

round(count(distinct user_id) * 100 /(select count(user_id) from Users) ,2) as percentage

from Register

group by contest_id

order by percentage desc,contest_id

Key Functionality

The code provided is a MySQL query that returns the following information for each contest:

~The contest ID

~The percentage of users who have registered for the contest

The query works as follows:

The select statement specifies the columns that should be returned. In this case, the contest_id and percentage columns are being returned.

The round() function is used to round the percentage value to two decimal places.

The count() function is used to count the number of distinct user IDs in the Register table for each contest ID.

The group by clause groups the results by the contest_id column.

The order by clause orders the results by the percentage column in descending order, and then by the contest_id column in ascending order.

Time and space complexity:

The time complexity of this query is O(n + m), where n is the number of rows in the Register table and m is the number of contests.
This is because the count() function needs to iterate over all the rows in the Register table for each contest ID.
The space complexity of this query is O(n), because it needs to store the intermediate results of the count() function.

Here is a breakdown of the time complexity of each step in the query:

select contest_id, round(count(distinct user_id) * 100 /(select count(user_id) from Users) ,2) as percentage:
This step takes O(n) time in the worst case, because the count() function needs to iterate over all the rows in the Register table for each contest ID.

group by contest_id: This step takes O(n) time in the worst case, because it needs to create a new group for each distinct contest ID.

order by percentage desc,contest_id: This step takes O(n log n) time in the worst case, because the order by 
clause sorts the results by the percentage column in descending order, and then by the contest_id column in ascending order.

Overall, the time complexity of this query is O(n + m). This means that the query will run slower as the number of rows in the Register table
increases or the number of contests increases. However, the query is still efficient for large datasets, because the O(n + m) time complexity
is asymptotically faster than the O(nÂ²) time complexity of other sorting algorithms, such as bubble sort and selection sort.


