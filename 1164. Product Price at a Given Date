1164. Product Price at a Given Date

Table: Products

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| new_price     | int     |
| change_date   | date    |
+---------------+---------+
(product_id, change_date) is the primary key (combination of columns with unique values) of this table.
Each row of this table indicates that the price of some product was changed to a new price at some date.
 

Write a solution to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+
Output: 
+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+


Step-by-Step Solution:
Select the Latest Price Before or On 2019–08–16:
For each product, you need to select the most recent price change on or before 2019–08–16.
Handle Default Price:
If a product has no price change records before or on 2019–08–16, you will return a price of 10.
Group by Product ID:
For each product, find the latest price using a MAX() function on change_date.
Writing the SQL Query:
SELECT product_id,
       COALESCE((
           SELECT new_price
           FROM Products p2
           WHERE p1.product_id = p2.product_id
             AND p2.change_date <= '2019-08-16'
           ORDER BY p2.change_date DESC
           LIMIT 1
       ), 10) AS price
FROM (SELECT DISTINCT product_id FROM Products) p1;
Explanation:
COALESCE is used to return the latest new_price if it exists, or 10 if there is no price change for the product.
We use a subquery to select the new_price for each product_id where the change_date is on or before '2019-08-16' and order it by change_date in descending order. 
The first result is the latest price for that product on or before the specified date.
DISTINCT ensures that we get only unique product_ids.
What You Will Learn in This Solution:
How to handle default values in SQL using COALESCE.
Techniques to find the most recent record based on a date condition.
How to manage complex queries with subqueries and ordering.
Follow Me for More SQL & Data Science Content:
If you found this article helpful and want to dive deeper into SQL, data science, and more, make sure to check out my other content.
You can find video solutions, tips, and tutorials across various platforms:

YouTube: Subscribe to my channel for detailed video solutions and tutorials. Hit the bell icon for updates!
Instagram: Follow me on Instagram for daily insights and quick tutorials on data science and SQL.
Twitter: Stay updated with bite-sized data science content.
GitHub: Check out my GitHub for code repositories, projects, and more resources.
Threads: Join the conversation on Threads for discussions, Q&A, and community support.
